/**
 * 1.0.x  : release
 */
def ARTIFACT_VERSION = "1.0"
def ARTIFACT_NAME = file(".").absoluteFile.name
def ARTIFACT_INSTALL_TARGET = getArtifactInstallTarget()
apply plugin: 'groovy'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// Local or maven
if (!hasProperty("EGLIBRARY_COMPILE_LOCAL")) {
    ext.EGLIBRARY_COMPILE_LOCAL = false
}

repositories {
    maven { url "http://eaglesakura.github.io/maven/" }
    mavenCentral()
}

configurations {
    groovyDoc
}

dependencies {
    // build groovy
    compile gradleApi()
    groovyDoc 'org.codehaus.groovy:groovy-groovydoc:2.3.3'
    groovyDoc 'org.codehaus.groovy:groovy-ant:2.3.3'

    if (EGLIBRARY_COMPILE_LOCAL) {
        compile project(':eglibrary:simple-logger')
        compile project(':eglibrary:simple-utils')
    } else {
        compile 'com.eaglesakura:simple-logger:1.+'
        compile 'com.eaglesakura:simple-utils:1.+'
    }
}

apply plugin: 'maven'

groovydoc {
    groovyClasspath = configurations.groovyDoc
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from "${buildDir}/docs/groovydoc"
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(ARTIFACT_INSTALL_TARGET))
            pom.version = ARTIFACT_VERSION + getArtifactVersionSuffix()
            pom.groupId = "com.eaglesakura"
            pom.artifactId = file(".").absoluteFile.name;
        }
    }
}

[uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
    pom.project {
        inceptionYear '2016'
        packaging 'jar'
        licenses {
            license {
                name 'NYSL'
                url 'https://raw.githubusercontent.com/eaglesakura/eglibrary/master/LICENSE-NYSL-eng.txt'
            }
            license {
                name 'MIT License'
                url 'https://raw.githubusercontent.com/eaglesakura/eglibrary/master/LICENSE-MIT.txt'
            }
        }
    }
}

task uploadGroovydoc << {
    def src = file("build/docs/groovydoc/");
    def dst = new File("${ARTIFACT_INSTALL_TARGET.absolutePath}/doc/${ARTIFACT_NAME}/");
    dst.deleteDir();
    dst.mkdirs();

    ["/usr/bin/rsync", "-a", src.absolutePath, dst.absolutePath].execute().text;
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".local"
    }
}

/**
 * Mavenの格納先を確定する
 */
def getArtifactInstallTarget() {
    if (file("maven").directory) {
        return file("maven");
    } else if (System.env.CIRCLE_ARTIFACTS != null) {
        return file(System.env.CIRCLE_ARTIFACTS);
    } else if (System.env.MAVEN_LOCAL_REPO != null) {
        return file(System.env.MAVEN_LOCAL_REPO);
    } else {
        return file("ci-release");
    }
}
